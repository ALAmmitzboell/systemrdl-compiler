================================================================================
The 'Node' User-interface
================================================================================
When traversing the tree, the user will interact with the object model solely
through the simplified interface provided by the Node object.

Even though the ComponentDef + Inst class reference tree is an accurate representation
of the compiled SystemRDL, it is not convenient to use since it does not provide
enough information to derive unambiguous hierarchical lineage.
The Node is an overlay class that is bound to each instance as the design
is traversed hierarchically.

Direct RDL property access:
    Use the following method to lookup the value:
        result = ctx.get_property('my_prop')

    get_property is implemented roughly as follows:
        - Is it in the component's property dictionary?
          if so, return the value
        - Otherwise, Is it even a valid property of this component type?
        - Return the default value as specified by the rulebook
        - If the rulebook contains <TBD> as the default, then
          a more dynamic resolution needs to be made

Meta-properties:
    Additional meta-properties are defined to make translation of a bunch of RDL
    properties into useful information easier.
    These are implemented as Python attribute getters:
        https://docs.python.org/3.6/library/functions.html#property
    
    For example, a meta-property for a field could be:
        ctx.implements_storage
    Where the getter would check the values of hw/sw properties to determine the
    answer.
    
    Meta-properties don't always need to operate on RDL properties. Could be any
    part of the internal object model.
    For example, a meta-property "base_address" will query the instance to see
    if an address allocator was used. If not, it will need to calculate the inferred
    address on-the-fly.
    
    Users can also define their own meta-properties.
    User provides a getter function of the following prototype:
        def my_meta_property_getter(ctx)
    And registers it <SOMEHOW>

================================================================================
Walker + Listener Tree Traversal
================================================================================

